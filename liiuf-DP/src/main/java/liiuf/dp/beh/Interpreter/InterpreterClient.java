package liiuf.dp.beh.Interpreter;

import org.junit.Test;

/**
 * @简介
 * - 给定一门语言，定义它的文法的一种表示，并定义一个解释器，该解释器使用该表示来解释语言中的句子。
 *
 * @优缺点
 * #优点
 * - 解释器是一个简单语法分析工具，它最显著的优点就是扩展性，修改语法规则只要修改相应的非终结符表达式就可以了，若扩展语法，
 *  则只要增加非终结符类就可以了。
 * #缺点
 * - 解释器模式会引起类膨胀：每个语法都要产生一个非终结符表达式，语法规则比较复杂时，就可能产生大量的类文件，为维护带来了非常多的麻烦。
 * - 解释器模式采用递归调用方法：每个非终结符表达式只关心与自己有关的表达式，每个表达式需要知道最终的结果，必须一层一层地剥茧，
 *  无论是面向过程的语言还是面向对象的语言，递归都是在必要条件下使用的，它导致调试非常复杂。想想看，如果要排查一个语法错误，
 *  我们是不是要一个断点一个断点地调试下去，直到最小的语法单元。
 * - 效率问题：解释器模式由于使用了大量的循环和递归，效率是一个不容忽视的问题，特别是一用于解析复杂、冗长的语法时，效率是难以忍受的。
 * #注意
 * - 尽量不要在重要的模块中使用解释器模式，否则维护会是一个很大的问题。在项目中可以使用shell、JRuby、Groovy等脚本语言来代替解释器模式，
 *  弥补Java编译型语言的不足。
 *
 * @使用场景
 * - 重复发生的问题可以使用解释器模式：例如，多个应用服务器，每天产生大量的日志，需要对日志文件进行分析处理，由于各个服务器的日志格式不同，但是
 * 数据要素是相同的，按照解释器的说法就是终结符表达式都是相同的，但是非终结符表达式就需要制定了。在这种情况下，可以通过程序来一劳永逸地解决该问题。
 * - 一个简单语法需要解释的场景：为什么是简单？看看非终结表达式，文法规则越多，复杂度越高，而且类间还要进行递归调用。想想看，多个类之间的调用你
 *  需要什么样的耐心和信心去排查问题。因此，解释器模式一般用来解析比较标准的字符集，例如SQL语法分析，不过该部分逐渐被专用工具所取代。
 */
public class InterpreterClient {
    /**
     * @分类
     * - AbstractExpression——抽象解释器
     *  具体的解释任务由各个实现类完成，具体的解释器分别由TerminalExpression和Non-terminalExpression完成。
     * - TerminalExpression——终结符表达式
     *  实现与文法中的元素相关联的解释操作，通常一个解释器模式中只有一个终结符表达式，但有多个实例，对应不同的终结符。
     * - NonTerminalExpression——非终结符表达式
     *  文法中的每条规则对应于一个非终结表达式，例如在加减法规则分别对应到AddExpression和SubExpression两个类。
     *  非终结符表达式根据逻辑的复杂程度而增加，原则上每个文法规则都对应一个非终结符表达式。
     * - Context——环境角色（也可以不需要），用于存储解释器外的一些全局信息
     *
     */
    @Test
    public void testExp01() {
    }
}